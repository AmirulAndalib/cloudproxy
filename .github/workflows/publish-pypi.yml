name: Publish Python Package

# This workflow is automatically triggered when a GitHub release is created
# by the main.yml workflow. This ensures that the PyPI package is published
# with the same version as the Docker image and GitHub release.
on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Set version from tag
      run: |
        # Extract version from the GitHub release tag (remove 'v' prefix if present)
        # This tag is created by the main.yml workflow
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Using version: $VERSION from GitHub release"
    - name: Update version in pyproject.toml
      run: |
        # Use sed to update the version in pyproject.toml to match the GitHub release
        sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"$RELEASE_VERSION\"/" pyproject.toml
        cat pyproject.toml | grep version
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python -m build
        twine check dist/*
        twine upload dist/* 